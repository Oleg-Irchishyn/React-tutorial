{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["wsChannel","WebSocket","Chat","Messages","AddMessageForm","React","useState","messages","setMessages","useEffect","addEventListener","e","newMessages","JSON","parse","data","prevMessages","style","height","overflow","map","m","index","Message","key","userName","message","width","borderRadius","src","photo","alt","setMessage","onChange","currentTarget","value","onClick","send","ChatPage"],"mappings":"wKAGMA,EAAY,IAAIC,UAAU,gEAa1BC,EAAiB,WACrB,OACE,6BACE,kBAACC,EAAD,MACA,kBAACC,EAAD,QAKAD,EAAqB,WAAO,IAAD,EACCE,IAAMC,SAA4B,IADnC,mBACxBC,EADwB,KACdC,EADc,KAQ/B,OANAH,IAAMI,WAAU,WACdT,EAAUU,iBAAiB,WAAW,SAACC,GACrC,IAAIC,EAAcC,KAAKC,MAAMH,EAAEI,MAC/BP,GAAY,SAACQ,GAAD,4BAAsBA,GAAtB,YAAuCJ,YAEpD,IAED,yBAAKK,MAAO,CAAEC,OAAQ,QAASC,SAAU,SACtCZ,EAASa,KAAI,SAACC,EAAoBC,GAArB,OACZ,kBAACC,EAAD,CAASC,IAAG,UAAKF,EAAL,YAAcD,EAAEI,UAAYC,QAASL,SAMnDE,EAAkD,SAAC,GAAiB,IAAfG,EAAc,EAAdA,QACzD,OACE,6BACE,yBAAKT,MAAO,CAAEU,MAAO,OAAQC,aAAc,OAASC,IAAKH,EAASI,MAAOC,IAAI,gBAC7E,2BAAIL,EAASD,UACb,6BACA,2BAAIC,EAASA,SACb,+BAKAtB,EAA2B,WAAO,IAAD,EACPC,IAAMC,SAAS,IADR,mBAC9BoB,EAD8B,KACrBM,EADqB,KASrC,OACE,6BACE,6BACE,8BAAUC,SAAU,SAACtB,GAAD,OAAOqB,EAAWrB,EAAEuB,cAAcC,QAAQA,MAAOT,KAEvE,6BACE,4BAAQU,QAbM,WACbV,IAGL1B,EAAUqC,KAAKX,GACfM,EAAW,OAQP,WAMOM,UA/DY,WACzB,OAAO,kBAACpC,EAAD","file":"static/js/5.c82da90c.chunk.js","sourcesContent":["import { message } from 'antd';\r\nimport React from 'react';\r\n\r\nconst wsChannel = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx');\r\n\r\nexport type ChatMessageType = {\r\n  message: string;\r\n  photo: string;\r\n  userId: number | string;\r\n  userName: string;\r\n};\r\n\r\nconst ChatPage: React.FC = () => {\r\n  return <Chat />;\r\n};\r\n\r\nconst Chat: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <Messages />\r\n      <AddMessageForm />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Messages: React.FC = () => {\r\n  const [messages, setMessages] = React.useState<ChatMessageType[]>([]);\r\n  React.useEffect(() => {\r\n    wsChannel.addEventListener('message', (e: MessageEvent) => {\r\n      let newMessages = JSON.parse(e.data);\r\n      setMessages((prevMessages) => [...prevMessages, ...newMessages]);\r\n    });\r\n  }, []);\r\n  return (\r\n    <div style={{ height: '400px', overflow: 'auto' }}>\r\n      {messages.map((m: ChatMessageType, index) => (\r\n        <Message key={`${index}_${m.userName}`} message={m} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Message: React.FC<{ message: ChatMessageType }> = ({ message }) => {\r\n  return (\r\n    <div>\r\n      <img style={{ width: '80px', borderRadius: '50%' }} src={message!.photo} alt=\"image_photo\" />\r\n      <b>{message!.userName}</b>\r\n      <br />\r\n      <p>{message!.message}</p>\r\n      <hr />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst AddMessageForm: React.FC = () => {\r\n  const [message, setMessage] = React.useState('');\r\n  const sendMessage = () => {\r\n    if (!message) {\r\n      return;\r\n    }\r\n    wsChannel.send(message);\r\n    setMessage('');\r\n  };\r\n  return (\r\n    <div>\r\n      <div>\r\n        <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n      </div>\r\n      <div>\r\n        <button onClick={sendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatPage;\r\n"],"sourceRoot":""}