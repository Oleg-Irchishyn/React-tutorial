{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/WithAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","DialogItem","path","id","className","s","dialog","active","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","createField","Textarea","required","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","compose","actions"],"mappings":"+GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,+GCI/MC,EAA6B,SAACC,GAAD,MAA0B,CACzDC,OAAQD,EAAME,KAAKD,SASd,SAASE,EAAsBC,GAmBpC,OAVqCC,YAMnCN,EACA,GAPmCM,EARyC,SAACC,GAC9CA,EAAzBL,OADkF,IACvEM,EADsE,YACxDD,EADwD,YAEvF,OAAKA,EAAML,OAGJ,kBAACG,EAAsBG,GAFrB,kBAAC,IAAD,CAAUC,GAAI,gB,6FCDZC,EATyB,SAACH,GACvC,IAAII,EAAO,YAAcJ,EAAMK,GAC/B,OACE,yBAAKC,UAAS,UAAKC,IAAEC,OAAP,YAAiBD,IAAEE,SAC/B,kBAAC,IAAD,CAASP,GAAIE,GAAOJ,EAAMU,QCFjBC,EAJsB,SAACX,GACpC,OAAO,yBAAKM,UAAWC,IAAEK,SAAUZ,EAAMY,U,yBCmCrCC,EAAcC,YAAiB,IAoB/BC,EAAsBC,YAA4D,CACtFC,KAAM,wBADoBD,EAhBxB,SAAChB,GACH,OACE,0BAAMkB,SAAUlB,EAAMmB,cACpB,6BACGC,YAAoC,qBAAsB,iBAAkBC,IAAU,CACrFC,IACAT,KAGJ,6BACE,6CAUOU,EA7CqB,SAACvB,GACnC,IAAIN,EAAQM,EAAMwB,YAEdC,EAAkB/B,EAAMgC,QAAQC,KAAI,SAACC,GAAD,OAAO,kBAAC,EAAD,CAAYlB,KAAMkB,EAAElB,KAAMmB,IAAKD,EAAEvB,GAAIA,GAAIuB,EAAEvB,QACtFyB,EAAmBpC,EAAMqC,SAASJ,KAAI,SAACK,GAAD,OAAO,kBAAC,EAAD,CAASpB,QAASoB,EAAEpB,QAASiB,IAAKG,EAAE3B,QAMrF,OACE,yBAAKC,UAAWC,IAAEmB,SAChB,yBAAKpB,UAAWC,IAAE0B,cAAeR,GACjC,yBAAKnB,UAAWC,IAAEwB,UAChB,6BAAMD,IAER,kBAACf,EAAD,CAAqBG,SAVL,SAACgB,GACnBlC,EAAMmC,YAAYD,EAAOE,qB,iCCfdC,sBACbtC,aAPoB,SAACL,GACrB,MAAO,CACL8B,YAAa9B,EAAM8B,eAKd,eACFc,MAELzC,IAJawC,CAKbd","file":"static/js/4.0273c970.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3bZI5\",\"dialogsItems\":\"Dialogs_dialogsItems__2llPa\",\"dialog\":\"Dialogs_dialog__1tH9j\",\"active\":\"Dialogs_active__1plan\",\"messages\":\"Dialogs_messages__2aytv\",\"message\":\"Dialogs_message__1XOAi\"};","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { appStateType } from '../redux/redux-store';\r\n\r\nlet mapStateToPropsForRedirect = (state: appStateType) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\ntype MapStatePropsType = {\r\n  isAuth: boolean;\r\n};\r\n\r\ntype MapDispatchPropsType = {};\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n  const RedirectComponent: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n    let { isAuth, ...restProps } = props;\r\n    if (!props.isAuth) {\r\n      return <Redirect to={'/login'} />;\r\n    }\r\n    return <WrappedComponent {...(restProps as WCP)} />;\r\n  };\r\n\r\n  let ConnectedAuthRedirectComponent = connect<\r\n    MapStatePropsType,\r\n    MapDispatchPropsType,\r\n    WCP,\r\n    appStateType\r\n  >(\r\n    mapStateToPropsForRedirect,\r\n    {},\r\n  )(RedirectComponent);\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n}\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n  id: string | number;\r\n  name: string;\r\n};\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n  let path = '/dialogs/' + props.id;\r\n  return (\r\n    <div className={`${s.dialog} ${s.active}`}>\r\n      <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import React, { Component } from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype PropsType = {\r\n  message: string;\r\n};\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n  return <div className={s.message}>{props.message}</div>;\r\n};\r\n\r\nexport default Message;\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { createField, Textarea } from '../common/Preloader/FormsControls/FormsControls';\r\nimport { required, maxLengthCreator } from '../../redux/utils/validators/validators';\r\nimport { initialStateType } from '../../redux/dialogsReducer';\r\n\r\ntype ownProps = {\r\n  dialogsPage: initialStateType;\r\n  sendMessage: (messageText: string) => void;\r\n};\r\n\r\nexport type NewMessageFormValuesType = {\r\n  newMessageBody: string;\r\n};\r\n\r\ntype NewMessageFormOwnProps = {};\r\n\r\ntype NewMessageFormTypeKeys = Extract<keyof NewMessageFormValuesType, string>;\r\n\r\nconst Dialogs: React.FC<ownProps> = (props) => {\r\n  let state = props.dialogsPage;\r\n\r\n  let dialogsElements = state.dialogs.map((d) => <DialogItem name={d.name} key={d.id} id={d.id} />);\r\n  let messagesElements = state.messages.map((m) => <Message message={m.message} key={m.id} />);\r\n\r\n  let addNewMessage = (values: NewMessageFormValuesType) => {\r\n    props.sendMessage(values.newMessageBody);\r\n  };\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>{dialogsElements}</div>\r\n      <div className={s.messages}>\r\n        <div>{messagesElements}</div>\r\n      </div>\r\n      <AddMessageFormRedux onSubmit={addNewMessage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm: React.FC<\r\n  InjectedFormProps<NewMessageFormValuesType, NewMessageFormOwnProps> & NewMessageFormOwnProps\r\n> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        {createField<NewMessageFormTypeKeys>('Enter your message', 'newMessageBody', Textarea, [\r\n          required,\r\n          maxLength50,\r\n        ])}\r\n      </div>\r\n      <div>\r\n        <button>Send</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AddMessageFormRedux = reduxForm<NewMessageFormValuesType, NewMessageFormOwnProps>({\r\n  form: 'dialogAddMessageForm',\r\n})(AddMessageForm);\r\n\r\nexport default Dialogs;\r\n","import React from 'react';\r\nimport Dialogs from './Dialogs';\r\nimport { actions} from \"../../redux/dialogsReducer\";\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../../hoc/WithAuthRedirect';\r\nimport { compose } from 'redux'\r\nimport { appStateType } from '../../redux/redux-store';\r\n\r\nlet mapStateToProps = (state: appStateType) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage\r\n  }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, {\r\n    ...actions\r\n  }),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n"],"sourceRoot":""}