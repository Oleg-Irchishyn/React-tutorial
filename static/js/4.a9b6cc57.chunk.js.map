{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/WithAuthRedirect.js","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","path","id","className","s","dialog","active","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","newMessageBody","dialogsItems","values","sendMessage","compose","dispatch","sendMessageCreator"],"mappings":"+GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,+ICG/MC,EAA6B,SAACC,GAAD,MAAY,CAC3CC,OAAQD,EAAME,KAAKD,SAGRE,EAAmB,SAACC,GAAe,IACxCC,EADuC,iLAGzC,OAAKC,KAAKC,MAAMN,OAGT,kBAACG,EAAcE,KAAKC,OAFlB,kBAAC,IAAD,CAAUC,GAAI,eAJkB,GACbC,IAAML,WAWtC,OAFqCM,YAAQX,EAARW,CAAoCL,K,sFCJ5DM,EATI,SAACJ,GAClB,IAAIK,EAAO,YAAcL,EAAMM,GAC/B,OACE,yBAAKC,UAAS,UAAKC,IAAEC,OAAP,YAAiBD,IAAEE,SAC/B,kBAAC,IAAD,CAAST,GAAII,GAAOL,EAAMW,QCGjBC,EARC,SAACZ,GACf,OACE,yBAAKO,UAAWC,IAAEK,SACfb,EAAMa,U,iCC0BPC,EAAcC,YAAiB,IAc/BC,EAAsBC,YAAU,CACpCC,KAAM,wBADoBD,EAZL,SAACjB,GACtB,OACE,0BAAMmB,SAAUnB,EAAMoB,cACpB,6BACE,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUZ,KAAK,iBAC/Ba,YAAY,qBAAqBC,SAAU,CAACC,IAAUZ,MAE1D,6BAAK,6CASIa,EA1CC,SAAC3B,GACf,IAAIP,EAAQO,EAAM4B,YAEdC,EAAkBpC,EAAMqC,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAMsB,IAAKD,EAAE1B,GAAIA,GAAI0B,EAAE1B,QACpF4B,EAAmBzC,EAAM0C,SAASJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAASvB,QAASuB,EAAEvB,QAASoB,IAAKG,EAAE9B,QAC9Db,EAAM4C,eAM3B,OACE,yBAAK9B,UAAWC,IAAEsB,SAChB,yBAAKvB,UAAWC,IAAE8B,cACfT,GAEH,yBAAKtB,UAAWC,IAAE2B,UAChB,6BAAMD,IAER,kBAAClB,EAAD,CAAqBG,SAZL,SAACoB,GACnBvC,EAAMwC,YAAYD,EAAOF,qB,iCCIdI,sBACbtC,aAfoB,SAACV,GACrB,MAAO,CACLmC,YAAanC,EAAMmC,gBAIE,SAACc,GACxB,MAAO,CACLF,YAAa,SAACH,GACZK,EAASC,YAAmBN,SAOhCzC,IAFa6C,CAGbd","file":"static/js/4.a9b6cc57.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2Ljl8\",\"dialogsItems\":\"Dialogs_dialogsItems__3wh2s\",\"dialog\":\"Dialogs_dialog__2vqyx\",\"active\":\"Dialogs_active__3UmIN\",\"messages\":\"Dialogs_messages__EnEr0\",\"message\":\"Dialogs_message__emROw\"};","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) {\r\n        return <Redirect to={\"/login\"} />\r\n      }\r\n      return <Component {...this.props} />\r\n    }\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n}","\r\nimport React, { Component } from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst DialogItem = (props) => {\r\n  let path = \"/dialogs/\" + props.id;\r\n  return (\r\n    <div className={`${s.dialog} ${s.active}`}>\r\n      <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DialogItem;","\r\nimport React, { Component } from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n  return (\r\n    <div className={s.message}>\r\n      {props.message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Message;","\r\nimport React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { Textarea } from '../common/Preloader/FormsControls/FormsControls';\r\nimport { required, maxLengthCreator } from '../../redux/utils/validators/validators';\r\n\r\nconst Dialogs = (props) => {\r\n  let state = props.dialogsPage;\r\n\r\n  let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />);\r\n  let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id} />);\r\n  let newMessageBody = state.newMessageBody;\r\n\r\n  let addNewMessage = (values) => {\r\n    props.sendMessage(values.newMessageBody)\r\n  }\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>\r\n        {dialogsElements}\r\n      </div>\r\n      <div className={s.messages}>\r\n        <div>{messagesElements}</div>\r\n      </div>\r\n      <AddMessageFormRedux onSubmit={addNewMessage} />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field component={Textarea} name=\"newMessageBody\"\r\n          placeholder=\"Enter your message\" validate={[required, maxLength50]} />\r\n      </div>\r\n      <div><button>Send</button></div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({\r\n  form: \"dialogAddMessageForm\"\r\n})(AddMessageForm);\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport Dialogs from './Dialogs';\r\nimport { sendMessageCreator } from \"../../redux/dialogsReducer\";\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../../hoc/WithAuthRedirect';\r\nimport { compose } from 'redux'\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage\r\n  }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage: (newMessageBody) => {\r\n      dispatch(sendMessageCreator(newMessageBody));\r\n    }\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n"],"sourceRoot":""}