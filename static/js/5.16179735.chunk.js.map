{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["Chat","React","useState","wsChannel","setWsChannel","useEffect","ws","closeHandler","console","log","setTimeout","createChannel","removeEventListener","close","WebSocket","addEventListener","Messages","AddMessageForm","messages","setMessages","messageHandler","e","newMessages","JSON","parse","data","prevMessages","style","height","overflow","map","m","index","Message","key","userName","message","width","borderRadius","src","photo","alt","setMessage","readyStatus","setReadyStatus","openHandler","onChange","currentTarget","value","disabled","onClick","send","ChatPage"],"mappings":"wKAcMA,EAAiB,WAAO,IAAD,EACOC,IAAMC,SAA2B,MADxC,mBACpBC,EADoB,KACTC,EADS,KA2B3B,OAxBAH,IAAMI,WAAU,WACd,IAAIC,EACEC,EAAe,WACnBC,QAAQC,IAAI,YACZC,WAAWC,EAAe,MAE5B,SAASA,IAAiB,IAAD,MACrB,QAAF,EAAAL,SAAA,SAAIM,oBAAoB,QAASL,GAC/B,QAAF,EAAAD,SAAA,SAAIO,QAEF,QAAF,EADAP,EAAK,IAAIQ,UAAU,uEACnB,SAAIC,iBAAiB,QAASR,GAC9BH,EAAaE,GAKf,OAFAK,IAEO,WACLL,EAAGM,oBAAoB,QAASL,GAChCD,EAAGO,WAEJ,IAEHZ,IAAMI,WAAU,cAAU,CAACF,IAGzB,6BACE,kBAACa,EAAD,CAAUb,UAAWA,IACrB,kBAACc,EAAD,CAAgBd,UAAWA,MAK3Ba,EAAsD,SAAC,GAAmB,IAAjBb,EAAgB,EAAhBA,UAAgB,EAC7CF,IAAMC,SAA4B,IADW,mBACtEgB,EADsE,KAC5DC,EAD4D,KAc7E,OAZAlB,IAAMI,WAAU,WACd,IAAIe,EAAiB,SAACC,GACpB,IAAIC,EAAcC,KAAKC,MAAMH,EAAEI,MAC/BN,GAAY,SAACO,GAAD,4BAAsBA,GAAtB,YAAuCJ,QAIrD,OAFS,OAATnB,QAAS,IAATA,KAAWY,iBAAiB,UAAWK,GAEhC,WACI,OAATjB,QAAS,IAATA,KAAWS,oBAAoB,UAAWQ,MAE3C,CAACjB,IAGF,yBAAKwB,MAAO,CAAEC,OAAQ,QAASC,SAAU,SACtCX,EAASY,KAAI,SAACC,EAAoBC,GAArB,OACZ,kBAACC,EAAD,CAASC,IAAG,UAAKF,EAAL,YAAcD,EAAEI,UAAYC,QAASL,SAMnDE,EAAkD,SAAC,GAAiB,IAAfG,EAAc,EAAdA,QACzD,OACE,6BACE,yBAAKT,MAAO,CAAEU,MAAO,OAAQC,aAAc,OAASC,IAAKH,EAASI,MAAOC,IAAI,gBAC7E,2BAAIL,EAASD,UACb,6BACA,2BAAIC,EAASA,SACb,+BAKAnB,EAA4D,SAAC,GAAmB,IAAjBd,EAAgB,EAAhBA,UAAgB,EACrDF,IAAMC,SAAiB,IAD8B,mBAC5EkC,EAD4E,KACnEM,EADmE,OAE7CzC,IAAMC,SAA8B,WAFS,mBAE5EyC,EAF4E,KAE/DC,EAF+D,KAInF3C,IAAMI,WAAU,WACd,IAAMwC,EAAc,WAClBD,EAAe,UAIjB,OAFS,OAATzC,QAAS,IAATA,KAAWY,iBAAiB,OAAQ8B,GAE7B,WACI,OAAT1C,QAAS,IAATA,KAAWS,oBAAoB,OAAQiC,MAExC,CAAC1C,IASJ,OACE,6BACE,6BACE,8BAAU2C,SAAU,SAACzB,GAAD,OAAOqB,EAAWrB,EAAE0B,cAAcC,QAAQA,MAAOZ,KAEvE,6BACE,4BAAQa,SAAwB,OAAd9C,GAAsC,UAAhBwC,EAAyBO,QAbnD,WACbd,IAGLjC,EAAWgD,KAAKf,GAChBM,EAAW,OAQP,WAQOU,UA9GY,WACzB,OAAO,kBAACpD,EAAD","file":"static/js/5.16179735.chunk.js","sourcesContent":["import { message } from 'antd';\r\nimport React from 'react';\r\n\r\nexport type ChatMessageType = {\r\n  message: string;\r\n  photo: string;\r\n  userId: number | string;\r\n  userName: string;\r\n};\r\n\r\nconst ChatPage: React.FC = () => {\r\n  return <Chat />;\r\n};\r\n\r\nconst Chat: React.FC = () => {\r\n  const [wsChannel, setWsChannel] = React.useState<WebSocket | null>(null);\r\n\r\n  React.useEffect(() => {\r\n    let ws: WebSocket;\r\n    const closeHandler = () => {\r\n      console.log('CLOSE WS');\r\n      setTimeout(createChannel, 3000);\r\n    };\r\n    function createChannel() {\r\n      ws?.removeEventListener('close', closeHandler);\r\n      ws?.close();\r\n      ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx');\r\n      ws?.addEventListener('close', closeHandler);\r\n      setWsChannel(ws);\r\n    }\r\n\r\n    createChannel();\r\n\r\n    return () => {\r\n      ws.removeEventListener('close', closeHandler);\r\n      ws.close();\r\n    };\r\n  }, []);\r\n\r\n  React.useEffect(() => {}, [wsChannel]);\r\n\r\n  return (\r\n    <div>\r\n      <Messages wsChannel={wsChannel} />\r\n      <AddMessageForm wsChannel={wsChannel} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Messages: React.FC<{ wsChannel: WebSocket | null }> = ({ wsChannel }) => {\r\n  const [messages, setMessages] = React.useState<ChatMessageType[]>([]);\r\n  React.useEffect(() => {\r\n    let messageHandler = (e: MessageEvent) => {\r\n      let newMessages = JSON.parse(e.data);\r\n      setMessages((prevMessages) => [...prevMessages, ...newMessages]);\r\n    };\r\n    wsChannel?.addEventListener('message', messageHandler);\r\n\r\n    return () => {\r\n      wsChannel?.removeEventListener('message', messageHandler);\r\n    };\r\n  }, [wsChannel]);\r\n\r\n  return (\r\n    <div style={{ height: '400px', overflow: 'auto' }}>\r\n      {messages.map((m: ChatMessageType, index) => (\r\n        <Message key={`${index}_${m.userName}`} message={m} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Message: React.FC<{ message: ChatMessageType }> = ({ message }) => {\r\n  return (\r\n    <div>\r\n      <img style={{ width: '80px', borderRadius: '50%' }} src={message!.photo} alt=\"image_photo\" />\r\n      <b>{message!.userName}</b>\r\n      <br />\r\n      <p>{message!.message}</p>\r\n      <hr />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst AddMessageForm: React.FC<{ wsChannel: WebSocket | null }> = ({ wsChannel }) => {\r\n  const [message, setMessage] = React.useState<string>('');\r\n  const [readyStatus, setReadyStatus] = React.useState<'pending' | 'ready'>('pending');\r\n\r\n  React.useEffect(() => {\r\n    const openHandler = () => {\r\n      setReadyStatus('ready');\r\n    };\r\n    wsChannel?.addEventListener('open', openHandler);\r\n\r\n    return () => {\r\n      wsChannel?.removeEventListener('open', openHandler);\r\n    };\r\n  }, [wsChannel]);\r\n\r\n  const sendMessage = () => {\r\n    if (!message) {\r\n      return;\r\n    }\r\n    wsChannel!.send(message);\r\n    setMessage('');\r\n  };\r\n  return (\r\n    <div>\r\n      <div>\r\n        <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n      </div>\r\n      <div>\r\n        <button disabled={wsChannel === null || readyStatus !== 'ready'} onClick={sendMessage}>\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatPage;\r\n"],"sourceRoot":""}